#!/bin/bash
SRCMOD=$(ls [!_]*.f90)
SRCMOD="$SRCMOD $(ls [!_]*.cpp)" 
# SRCMOD="$SRCMOD $(ls [!_]*.c)" 
# SRCMOD2=$(ls [!_]*.cu)
#
rm -f makefile
rm -f *.o 
rm -f *.mod 
rm -f *~
#
cat > makefile << EOF
TOPDIR=../../
include \$(TOPDIR)/CONFIG

TARGET=lowdin-integralsTransformation.x
LDR=\$(FC)
CUDA=\$(CUBAFLAGS)
INC=-I\$(TOPDIR)src/core/ 
INCI=-I\$(TOPDIR)src/ints/
LDPATH=\$(TOPDIR)lib/lowdincore.a \$(TOPDIR)lib/libtransform.a \$(TOPDIR)src/ints/AttractionIntegrals.o \$(TOPDIR)src/ints/CudintInterface.o \$(TOPDIR)src/ints/DirectIntegralManager.o \$(TOPDIR)src/ints/G12Integrals.o  \$(TOPDIR)src/ints/Iterators.o \$(TOPDIR)src/ints/KineticIntegrals.o \$(TOPDIR)src/ints/Libint2Iface.o \$(TOPDIR)src/ints/Libint2Interface.o \$(TOPDIR)src/ints/MomentIntegrals.o  \$(TOPDIR)src/ints/HarmonicIntegrals.o \$(TOPDIR)src/ints/OverlapIntegrals.o \$(TOPDIR)src/ints/RysQInts.o \$(TOPDIR)src/ints/RysQuadrature.o \$(TOPDIR)src/ints/ThreeCOverlapIntegrals.o
FLAGS=\$(FCFLAGS)
LIBS=\$(ALL_LIBS) -lm 
HELIOSFLAGS=\$(CPPFLAGS) -D_OPENMP  -Ofast -std=c++11   -finline-functions -g  -ffast-math  -w

EOF
OBJECTS=$(for file in $SRCMOD 
          do
            echo -e "${file%.*}.o \c"
          done
          ) 
OBJECTS2=$(for file in $SRCMOD2 
          do
            echo -e "${file%.*}.o \c"
          done
          ) 
if [ "$CUDA" = "yes" ] ; then
    echo -e "\n\$(TARGET) : \$(OBJECTS) \$(OBJECTS2)" >> makefile
    echo -e "\t\$(LDR) \$(FLAGS) -o \$(TARGET) \$(OBJECTS) \$(OBJECTS2) \$(LDPATH) \$(LIBS)" >> makefile
    echo -e "\tmv \$(TARGET) \$(TOPDIR)bin/\n" >> makefile
else
    echo -e "\n\$(TARGET) : \$(OBJECTS)" >> makefile
    echo -e "\t\$(LDR) \$(FLAGS) -o \$(TARGET) \$(OBJECTS) \$(LDPATH) \$(LIBS)" >> makefile
    echo -e "\tmv \$(TARGET) \$(TOPDIR)bin/\n" >> makefile
fi

#Fortran

# SRCMOD=$(ls [!_]*.f90)
# TOPDIR=../..
# INCIPATH=$TOPDIR/src/ints/
# INCI=$INCIPATH/*.f90
# INCI2=$INCIPATH/*.cpp

# for file in $SRCMOD 
# do
#    for ifile in $INCI 
#    do
#       ifilename=$(echo `basename "$ifile"`)
#       auxifile="${ifilename%.*}"
#       inci=$(grep "use "\\$auxifile $file)
#       if [[ -n $inci ]]
#       then
#         #echo -e "$INCIPATH$auxifile.o \c" >> makefile
#         OBJECTS=$OBJECTS$INCIPATH$auxifile.o" "  
#       fi
#    done
#    for ifile in $INCI2 
#    do
#       ifilename=$(echo `basename "$ifile"`)
#       auxifile="${ifilename%.*}"
#       inci=$(grep "\!# use "\\$auxifile $file)
#       if [[ -n $inci ]]
#       then
#         #echo -e "$INCIPATH$auxifile.o \c" >> makefile
#         OBJECTS=$OBJECTS$INCIPATH$auxifile.o" "  
#       fi
#    done
# done

echo -e "OBJECTS=$OBJECTS" >> makefile

echo -e "\n\$(TARGET) : \$(OBJECTS)" >> makefile
echo -e "\t\$(LDR) \$(FLAGS) -o \$(TARGET) \$(OBJECTS) \$(LDPATH) \$(LIBS)" >> makefile
echo -e "\tmv \$(TARGET) \$(TOPDIR)bin/\n" >> makefile

# #

for file in $SRCMOD 
do
   echo -e "${file%.f90}.o:\t${file} \c" >> makefile
   for ifile in $INC
   do
      inc=$(grep $ifile $file)
      if [[ -n $inc ]]
      then
        echo -e "$ifile \c" >> makefile
      fi
   done
  for mod in $(grep use\  $file | cut -d" " -f4 | cut -d"_" -f1)
   do
     name=$(echo $mod)
     
     for jfile in $SRCMOD
     do
       if [[ $jfile == $name.f90 ]]
       then
         echo -e "$name.o \c" >> makefile
       fi
     done
   done
  echo -e "\n\t\$(FC) -c \$(INC) \$(INCI) \$(FLAGS) ${file}\n" >> makefile
done


#c++ sources
SRCMOD=$(ls [!_]*.cpp)
for file in $SRCMOD 
do
    echo -e "${file%.cpp}.o:\t${file} \c" >> makefile
    echo -e "\n\t\$(CXX) -c \$(INC) \$(HELIOSFLAGS) ${file}\n" >> makefile
# \$(CFLAGS) ${file}\n" >> makefile
done
#
#c sources
# SRCMOD=$(ls [!_]*.c)
# for file in $SRCMOD 
# do
#     echo -e "${file%.c}.o:\t${file} \c" >> makefile
#     echo -e "\n\t\$(CU) -c \$(INC) ${file}\n" >> makefile
# done
#cuda sources
if [ "$CUDA" = "yes" ] ; then
SRCMOD=$(ls [!_]*.cu)
for file in $SRCMOD 
do
    echo -e "${file%.cu}.o:\t${file} \c" >> makefile
    echo -e "\n\t\$(CU) -c \$(INC) ${file}\n" >> makefile
done
fi
#
cat >> makefile << EOF
clean:: 
	rm -f *.o
	rm -f *.mod
	rm makefile
EOF
#
